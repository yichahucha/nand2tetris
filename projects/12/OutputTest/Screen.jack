// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static int color;

    /** Initializes the Screen. */
    function void init() {
        let color = 1;
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        // 8K RAM 16384-24575 
        // n=8*1024=8192
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if(b){
            let color = 1;
        }else{
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, rem, quo;
        let quo = x / 16;
        //把坐标点换算成RAM中的地址
        let address = screen + (32 * y) + quo;
        //取出地址对应的值
        let value = Memory.peek(address);
        //使用余数找到对应的位，一个像素点就是一个位
        // let rem = x & 15; 使用 and 取余数，只有当x是2的n次方时，才可以用 and 取余数
        let rem = x - (quo * 16);
        //根据当前颜色变量来判断新写入的位是写0还是1
        if(color = 1) {
            //按位或
            let value = value | Math.twoToThe(rem);
        }else {
            //按位与、按位取反
            let value = value & (~Math.twoToThe(rem));
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;

        //dot
        if((x1 = x2) & (y1 = y2)) {
            do Screen.drawPixel(x1,y1);
            return;
        }

        // horizontal
        if(y1 = y2) {
            if(x1 < x2) {
                while(~(x1 > x2)){
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 + 1;
                }
            }else {
                while(~(x1 < x2)){
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 - 1;
                }
            }
            return;
        }

        // vertical
        if(x1 = x2) {
            if(y1 < y2) {
                while(~(y1 > y2)){
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 + 1;
                }
            }else {
                while(~(y1 < y2)){
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 - 1;
                }
            }
            return;
        }

        let dx = Math.abs(x2-x1);
        let dy = Math.abs(y2-y1);
        while((~(a>dx)) & (~(b>dy))) {
            //right->down
            if((x1<x2) & (y1<y2)){
                do Screen.drawPixel(x1+a, y1+b);
            }
            //right->up
            if((x1<x2) & (y1>y2)){
                do Screen.drawPixel(x1+a, y1-b);
            }
            //left->up
            if((x1>x2) & (y1>y2)){
                do Screen.drawPixel(x1-a, y1-b);
            }
            //left->down
            if((x1>x2) & (y1<y2)){
                do Screen.drawPixel(x1-a, y1+b);
            }
            // decides which way to go
            if (diff < 0) { 
                let a = a + 1; 
                let diff = diff + dy;
            }else {
                let b = b + 1; 
                let diff = diff - dx; 
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)){
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, exp1, exp2;
        if(r > 181) {
            let r = 181;
        }
        let dy = -r;
        while(~(dy > r)){
            let exp1 = Math.sqrt(Math.multiply(r,r) - Math.multiply(dy,dy));
            let exp2 = y+dy;
            do Screen.drawLine(x-exp1, exp2, x+exp1, exp2);
            let dy = dy + 1;
        }
        return;
    }
}


/**
Q:88%16 和 88and15 计算结果为什么相同
A:这是因为在计算机科学中，使用的是二进制数（由0和1组成的数字系统）。在二进制数中，15的二进制表示为1111，16的二进制表示为10000。而当我们使用位运算符AND（&）时，它会将相应位上的数字进行比较，如果两个数字都是1，则结果为1，否则为0。因此，当88与15进行AND运算时，会将88的二进制表示的最后四位与15的二进制表示的最后四位进行比较，由于最后四位都是1，所以结果为15。同样的，当88与16进行AND运算时，会将88的二进制表示的最后五位与16的二进制表示的最后五位进行比较，由于88的二进制表示的最后一位是0，所以结果为0，即88%16=0。因此，结果相同。

Q:这种算法的规律是什么，我可以只用and算余数么
A:这种算法的规律是，当对一个数n取模时，如果模数m是2的幂次方，那么可以使用位运算符AND（&）来代替模运算，计算公式为n & (m-1)。

这是因为，当模数m是2的幂次方时，m的二进制表示只有一个1，其余位都是0，例如m=16时，其二进制表示为10000，m-1的二进制表示为1111。这意味着，将n与m-1进行AND运算后，只有n的二进制表示中的低位数位会保留，而高位数位会被清零，这就相当于对n进行模m的操作。

因此，如果模数是2的幂次方，可以使用位运算符AND来代替模运算，这种算法可以提高程序的效率。

需要注意的是，这种方法只适用于模数为2的幂次方的情况，对于其他模数，还需要使用其他的算法来进行计算。
*/