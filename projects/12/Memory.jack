// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;
    static Array freeList;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        // let heap = 2048; //heapBase
        // let freeList = 2048;
        // let freeList[0] = 0; //next
        // let freeList[1] = 14335; //length(size) size = endAddr - satrtAddr - 1
        let freeList = Memory.block(2048, 0 ,14335);
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        if(address > 32767){
            return;
        }
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        if(address > 32767){
            return;
        }
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var boolean loop;
        var Array freeBlock;
        var Array newBlock;
        var int address;
        let freeBlock = freeList;
        let loop = true;
        while(loop) {
            if((Memory.blockSize(freeBlock) > (size+2)) | (Memory.blockSize(freeBlock) = (size+2))) {
                //获取的内存地址
                let address = Memory.blockAddress(freeBlock) + Memory.blockSize(freeBlock) - size + 1;
                //生成新的块，在销毁的时候会用到
                let newBlock = Memory.block(address - 2, 0, size);
                do Memory.setBlockSize(freeBlock, Memory.blockSize(freeBlock) - size - 2);
                let loop = false;
            }else {
                if(Memory.blockNext(freeBlock) = 0) {
                    let loop = false;
                }else {
                    let freeBlock = Memory.blockNext(freeBlock);
                }
            }
        }
        return address;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;
        var Array currentBlock;
        var boolean loop;
        let currentBlock = freeList;
        let loop = true;
        //获取要销毁对象的块节点
        let block = o-2;
        //添加到链表尾
        let currentBlock = freeList;
        while(loop) {
            if(Memory.blockNext(currentBlock) = 0) {
                do Memory.setBlockNext(currentBlock, block);
                let loop = false;
            }else {
                let currentBlock = Memory.blockNext(currentBlock);
            }
        }
        return;
    }

    //链表的块抽象，也可以理解成节点
    function Array block(Array address, Array next, int size) {
        let address[0] = next;
        let address[1] = size;
        return address;
    }

    function int blockSize(Array block) {
        return block[1];
    }

    function Array blockNext(Array block) {
        return block[0];
    }

    function int blockAddress(Array block) {
        return block;
    }

    function void setBlockSize(Array block, int size) {
        let block[1] = size;
        return;
    }

    function void setBlockNext(Array block, int next) {
        let block[0] = next;
        return;
    }
}
